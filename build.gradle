plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.10'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'umc'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// 어노테이션을 활용한 validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// Spring Security는 기본적으로 자동 설정(Auto-Configuration)을 통해 프로젝트에 기본적인 보안 기능을 적용함
	// 별도의 설정이나 코드 작성 없이도 시스템에 기본적인 보안이 활성화됨
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	// Thymeleaf 의존성
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	// thymeleaf에서도 security가 동작하게 하기 위해
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

tasks.named('test') {
	useJUnitPlatform()
}

// QueryDSL Generated 소스 디렉토리 설정
def generated = 'src/main/generated'

sourceSets {
	main.java.srcDirs += generated
}

//tasks.withType(JavaCompile).configureEach {
//	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
//}
tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory = file(generated)
}

tasks.named('clean') {
	delete file(generated)
}
